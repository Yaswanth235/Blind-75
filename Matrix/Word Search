Approach:

1. first we traverse the matrix and try to find the first letter of the target.
2. if first letter is found, we call the function "search" to find the word.
3. "search" function basically tries to find the word in the left right top bottom directions respectively.
4. if the word is found, "search" function returns true.



class Solution {
public:
    bool search(int i,int j,int n,int m,vector<vector<char>>& board,string& word,int k){
        if(k==word.size())return true;
        if(i<0||j<0||i==n||j==m||board[i][j]!=word[k])return false;
        char c=board[i][j];
        board[i][j]='$';
        bool op1=search(i+1,j,n,m,board,word,k+1);
        bool op2=search(i,j+1,n,m,board,word,k+1);
        bool op3=search(i-1,j,n,m,board,word,k+1);
        bool op4=search(i,j-1,n,m,board,word,k+1);
        board[i][j]=c;
        return op1||op2||op3||op4;
    }
    bool exist(vector<vector<char>>& board,string word) {
        int n=board.size();
        int m=board[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]==word[0]){
                    if(search(i,j,n,m,board,word,0)){
                        return true;
                }
            }
        }
    }
    return false;
    }
};

Approach:

1. since list is sorted,middle node's data is the root's data of BST.
2. passing the left half of linked list to root's left and right half to root's right constructs the tree.


Code:

class Solution{
  public:
    TNode* solve(LNode *Lhead,LNode *Rhead){
          if(Lhead==Rhead){
                return NULL;
          }
        LNode*slow=Lhead,*fast =Lhead;
        while(fast!=Rhead&&fast->next!=Rhead){
               slow=slow->next;
               fast=fast->next->next;
        }
          TNode*root=new TNode(slow->data);
          root->left=solve(Lhead,slow);
          root->right=solve(slow->next,Rhead);
          return root;
          
    }
    TNode* sortedListToBST(LNode *head) {
         if(head==NULL)return NULL;
         return solve(head,NULL);
    }
};
